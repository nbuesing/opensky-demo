---
version: '3.7'

networks:
  default:
    name: demo_network
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.1
    hostname: zookeeper
    container_name: demo_zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker-1:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    hostname: broker-1
    container_name: demo_broker-1
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 5
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_OFFSETS_TOPIC_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_METRIC_REPORTERS:
      CONFLUENT_METRICS_ENABLE: 'false'

  broker-2:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    hostname: broker-2
    container_name: demo_broker-2
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 5
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_OFFSETS_TOPIC_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_METRIC_REPORTERS:
      CONFLUENT_METRICS_ENABLE: 'false'

  broker-3:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    hostname: broker-3
    container_name: demo_broker-3
    depends_on:
      - zookeeper
    ports:
      - "39092:39092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 5
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_OFFSETS_TOPIC_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_METRIC_REPORTERS:
      CONFLUENT_METRICS_ENABLE: 'false'

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.1
    hostname: schema-registry
    container_name: demo_schema-registry
    ports: 
      - "8081:8081"
    depends_on:
      - zookeeper
      - broker-1
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LOG4J_OPTS: '-Dlog4j.configuration=file:/etc/schema-registry/quiet-logging.properties'
    volumes:
      - ./schema-registry/log4j.properties:/etc/schema-registry/quiet-logging.properties
        
  connect:
#    image: nbuesing/kafka-connect-opensky:1.0.0
    build:
      context: .
      dockerfile: connect.docker
    hostname: connect
    container_name: demo_connect
    restart: always
    ports:
      - '8083:8083'
    depends_on:
      - zookeeper
      - broker-1
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker-1:9092,broker-2:9092,broker-3:9092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"

#  ksql-server:
#    image: confluentinc/cp-ksql-server:5.4.0-dist-1
#    #image: confluentinc/cp-ksql-server:5.3.1
#    hostname: ksql-server
#    container_name: demo_ksql-server
#    depends_on:
#      - broker-1
#      - broker-2
#      - broker-3
#      - connect
##    ports:
##      - "8088:8088"
#    volumes:
#      - ./ksqldb-udfs/build/libs:/etc/ksql/ext
#    environment:
#      KSQL_CONFIG_DIR: /etc/ksql
#      KSQL_KSQL_EXTENSION_DIR: "/etc/ksql/ext"
#      KSQL_UDFS_ENABLED: "true"
#      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
#      KSQL_LOG4J_ROOT_LOGLEVEL: DEBUG
#      KSQL_TOOLS_LOG4J_LOGLEVEL: DEBUG
#      KSQL_BOOTSTRAP_SERVERS: "broker-1:9092,broker-2:9092,broker-3:9092"
#      KSQL_HOST_NAME: ksql-server
#      KSQL_APPLICATION_ID: "ksql-server"
#      KSQL_LISTENERS: "http://0.0.0.0:8088"
#      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
#      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#      KSQL_PRODUCER_INTERCEPTOR_CLASSES: ""
#      KSQL_CONSUMER_INTERCEPTOR_CLASSES: ""

#  ksql-cli:
#    image: confluentinc/cp-ksql-cli:5.4.0-dist-1
#    #image: confluentinc/cp-ksql-cli:5.3.1
#    hostname: ksql-cli
#    container_name: demo_ksql-cli
#    depends_on:
#      - ksql-server
#    entrypoint: /bin/sh
#    tty: true

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.2
    hostname: elasticsearch
    container_name: demo_elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      xpack.security.enabled: "false"
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes: 
      - ./elasticsearch/data/elasticserarch:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.4.2
    hostname: kibana
    container_name: demo_kibana
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    environment:
      xpack.security.enabled: "false"
      discovery.type: "single-node"


